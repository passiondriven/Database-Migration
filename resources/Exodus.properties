########################################
# MariaDB Migration Properties.
# Author: Faisal
# 12-Aug-2018
########################################

#Additional Property File
AdditionalPropertyFile=resources/AdditionalProperties.properties

#Database Tag Names to Connect to, the following will be read from the resources/dbdetails.xml
SourceDB=MySQL
SourceConnectParams=useUnicode=yes&characterEncoding=utf8

TargetDB=MariaDB
TargetConnectParams=useUnicode=yes&characterEncoding=utf8&rewriteBatchedStatements=true
#useBatchMultiSend=true&useServerPrepStmts=false&rewriteBatchedStatements=true

# ThreadCount is for parallel Table loading, each thread will take care of ONE table.
ThreadCount=1

#Paths with reference to the current folder. Do not use "/" at the end of the path
LogPath=/home/faisal/Work/Java/Exodus/src/logs
DDLPath=/home/faisal/Work/Java/Exodus/src/ddl
ExportPath=/home/faisal/Work/Java/Exodus/src/export

#Path for Windows
#LogPath=C:\\Users\\faisa\\OneDrive\\Work\\Java\\Exodus\\src\\logs
#DDLPath=C:\\Users\\faisa\\OneDrive\\Work\\Java\\Exodus\\src\\ddl
#ExportPath=C:\\Users\\faisa\\OneDrive\\Work\\Java\\Exodus\\src\\export

#Just Scans through the source database and target database and validates of any problems.
DryRun=NO

#Database User's to Migrate
UsersToMigrate=USER IN ('eclaimsadm', 'las')

#Databases to Migrate, Comma separated String values, use SQL WHERE clause compatible with the Source DB Data Dictionary Tables
DatabaseToMigrate=SCHEMA_NAME IN ('rsts_schema', 'WORLD!', 'employees!')

#Criteria to be added to the SELECT QUERY to filter down the tables for migration, use SQL WHERE clause compatible with the Source DB Data Dictionary Tables
TablesToMigrate=TABLE_NAME LIKE '%'

#TransactionSize is the size of the Batch, COMMIT will be executed after for each batch size.
TransactionSize=1000

#WHERE Clause Additional Criteria
SCHEMANAME.TABLENAME.WHERECriteria = COL1 = 74196328 AND COL2 LIKE 'SOMETHING%'

#Additional Criteria like LIMIT or ORDER BY etc.
SCHEMANAME.TABLENAME.AdditionalCriteria = LIMIT 13

#CustomTable DDL, not IMPLEMENTED yet
TABLE_NAME.COLUMN_NAME.TYPE=<TYPE>
TABLE_NAME.COLUMN_NAME.LENGTH=<LENGTH>
TABLE_NAME.COLUMN_NAME.SCALE=<SCALE>

#These tables data migration will be skipped from JDBC migration, only tables will be created, 
#Use SQL WHERE clause compatible with the Source DB Data Dictionary Tables
ExportTablesToFile=TABLE_NAME IN ('')

#These Tables will be Skipped from Migration, use SQL WHERE clause compatible with the Source DB Data Dictionary Tables
SkipTableMigration=TABLE_NAME IN ('')

#These Pre Migraiton Scripts will auto execute before any table's Migration starts, Can add anything 
#Here setting all disabling all the constraints, at the end of the migration, ENABLE script will execute
MySQL.PreLoadStatements.1=SET GLOBAL check_constraint_checks=0
MySQL.PreLoadStatements.2=SET GLOBAL foreign_key_checks=0
MySQL.PreLoadStatements.3=SET GLOBAL unique_checks=0

#These Post Migration Scripts will auto execute at the end of the migraiton. Can add anything 
#This will ensure that the disabled constraints in the previous section are enabled again.
MySQL.PostLoadStatements.1=SET GLOBAL check_constraint_checks=1
MySQL.PostLoadStatements.2=SET GLOBAL foreign_key_checks=1
MySQL.PostLoadStatements.3=SET GLOBAL unique_checks=1

#select X.TabName, X.CreatedTTM, X.UpdateDTTM, X.TotalRecords, X.RecordsUpdated, Round(X.RecordsUpdated / X.TotalRecords * 100,2) `Progress %`, X.LastKeyUpdated from db2migrationlog X  INNER JOIN (SELECT TABNAME, MAX(SerialNo) SerialNo FROM db2migrationlog GROUP BY TABNAME) Y ON Y.TABNAME = X.TABNAME AND Y.SerialNo = X.SerialNo WHERE RecordsUpdated > 0;